{"ast":null,"code":"import { SET_ERRORS, UPDATE_PASSWORD, TEST_RESULT, STUDENT_LOGIN, ATTENDANCE, UPDATE_STUDENT, GET_SUBJECT } from \"../actionTypes\";\nimport * as api from \"../api\";\nexport const studentSignIn = (formData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.studentSignIn(formData);\n    dispatch({\n      type: STUDENT_LOGIN,\n      data\n    });\n    if (data.result.passwordUpdated) navigate(\"/student/home\");else navigate(\"/student/password\");\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const studentUpdatePassword = (formData, navigate) => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.studentUpdatePassword(formData);\n    dispatch({\n      type: UPDATE_PASSWORD,\n      payload: true\n    });\n    alert(\"Password Updated\");\n    navigate(\"/student/home\");\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const updateStudent = formData => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.updateStudent(formData);\n    dispatch({\n      type: UPDATE_STUDENT,\n      payload: true\n    });\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getSubject = (department, year) => async dispatch => {\n  try {\n    const formData = {\n      department,\n      year\n    };\n    const {\n      data\n    } = await api.getSubject(formData);\n    dispatch({\n      type: GET_SUBJECT,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getTestResult = (department, year, section) => async dispatch => {\n  try {\n    const formData = {\n      department,\n      year,\n      section\n    };\n    const {\n      data\n    } = await api.getTestResult(formData);\n    dispatch({\n      type: TEST_RESULT,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};\nexport const getAttendance = (department, year, section) => async dispatch => {\n  try {\n    const formData = {\n      department,\n      year,\n      section\n    };\n    const {\n      data\n    } = await api.getAttendance(formData);\n    dispatch({\n      type: ATTENDANCE,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: SET_ERRORS,\n      payload: error.response.data\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/HongOanh/OneDrive/Desktop/College-Erp/client/src/redux/actions/studentActions.js"],"names":["SET_ERRORS","UPDATE_PASSWORD","TEST_RESULT","STUDENT_LOGIN","ATTENDANCE","UPDATE_STUDENT","GET_SUBJECT","api","studentSignIn","formData","navigate","dispatch","data","type","result","passwordUpdated","error","payload","response","studentUpdatePassword","alert","updateStudent","getSubject","department","year","getTestResult","section","getAttendance"],"mappings":"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","sourcesContent":["import {\r\n  SET_ERRORS,\r\n  UPDATE_PASSWORD,\r\n  TEST_RESULT,\r\n  STUDENT_LOGIN,\r\n  ATTENDANCE,\r\n  UPDATE_STUDENT,\r\n  GET_SUBJECT,\r\n} from \"../actionTypes\";\r\nimport * as api from \"../api\";\r\n\r\nexport const studentSignIn = (formData, navigate) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.studentSignIn(formData);\r\n    dispatch({ type: STUDENT_LOGIN, data });\r\n    if (data.result.passwordUpdated) navigate(\"/student/home\");\r\n    else navigate(\"/student/password\");\r\n  } catch (error) {\r\n    dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n  }\r\n};\r\n\r\nexport const studentUpdatePassword =\r\n  (formData, navigate) => async (dispatch) => {\r\n    try {\r\n      const { data } = await api.studentUpdatePassword(formData);\r\n      dispatch({ type: UPDATE_PASSWORD, payload: true });\r\n      alert(\"Password Updated\");\r\n      navigate(\"/student/home\");\r\n    } catch (error) {\r\n      dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n    }\r\n  };\r\n\r\nexport const updateStudent = (formData) => async (dispatch) => {\r\n  try {\r\n    const { data } = await api.updateStudent(formData);\r\n    dispatch({ type: UPDATE_STUDENT, payload: true });\r\n  } catch (error) {\r\n    dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n  }\r\n};\r\n\r\nexport const getSubject = (department, year) => async (dispatch) => {\r\n  try {\r\n    const formData = {\r\n      department,\r\n      year,\r\n    };\r\n    const { data } = await api.getSubject(formData);\r\n    dispatch({ type: GET_SUBJECT, payload: data });\r\n  } catch (error) {\r\n    dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n  }\r\n};\r\n\r\nexport const getTestResult =\r\n  (department, year, section) => async (dispatch) => {\r\n    try {\r\n      const formData = {\r\n        department,\r\n        year,\r\n        section,\r\n      };\r\n      const { data } = await api.getTestResult(formData);\r\n      dispatch({ type: TEST_RESULT, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n    }\r\n  };\r\n\r\nexport const getAttendance =\r\n  (department, year, section) => async (dispatch) => {\r\n    try {\r\n      const formData = {\r\n        department,\r\n        year,\r\n        section,\r\n      };\r\n      const { data } = await api.getAttendance(formData);\r\n      dispatch({ type: ATTENDANCE, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: SET_ERRORS, payload: error.response.data });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}